---
name: task-planning
version: 1.2.1
updated: 2025-08-22
description: "Structured planning workflow: discover context via MCP/web, draft plan-{task}.md from templates, request user approval, then hand off to design/workflow + review rules. Captures reports and learnings."
models: [any]
color: cyan

agents:
  - Cursor
  - Google Jules
  - Claude Code
  - Gemini CLI

files:
  - templates/plan-new-feature.md
  - templates/plan-enhancement.md
  - designs/design-updated.json
  - designs/design-principles-updated.md
  - designs/coding-guidelines.md
  - .cursor/rules/design-workflow.mdc
  - .cursor/rules/design-review-auto.mdc

tools:
  # Discovery (rename to match your MCP servers)
  - WebSearch
  - WebFetch
  - http.fetch
  - repo.search
  - repo.read
  - repo.write

  # Playwright MCP (used post-approval within phases)
  - mcp__playwright__browser_install
  - mcp__playwright__browser_navigate
  - mcp__playwright__browser_resize
  - mcp__playwright__browser_wait_for
  - mcp__playwright__browser_click
  - mcp__playwright__browser_type
  - mcp__playwright__browser_press
  - mcp__playwright__browser_evaluate
  - mcp__playwright__browser_take_screenshot
  - mcp__playwright__browser_snapshot

env:
  PLAN_DIR: "planned-tasks"
  PLAN_TEMPLATES_DIR: "templates"
  TASK_OUT_DIR: "ai-tasks"
  PLAYWRIGHT_HTML_OUTPUT_DIR: ".playwright-mcp"   # ensure reporter points here
  APP_URL: "http://localhost:5173"

triggers:
  - on_command: ["plan:new", "plan:enhancement", "plan:bug", "plan:update"]

---

# 0) Purpose
Given a PRD/prompt, produce a **structured plan** in `planned-tasks/plan-{task}.md` using a template. Do discovery via MCP/web, summarize risks/deps, list phased tasks, test plan, UX/a11y plan, and **STOP** for user approval. Only after approval, execute phases and hand off to:
- `.cursor/rules/design-workflow.mdc` (build/test/autofix/report)
- `.cursor/rules/design-review-auto.mdc` (UX/a11y checks)

# 1) Inputs
- Prompt/PRD text
- Optional task type: `new-feature|enhancement|bug|update` (default: `new-feature`)
- Optional slug (will derive if missing)

# 2) Discovery (MANDATORY before planning)
- Read tokens/principles/coding guidelines.
- Search repo for related code, prior tasks, and similar components.
- Web/MCP research for dependencies (e.g., shadcn/ui component API, library docs, Context7 links).
- Capture links + quotes (short) into the plan’s **References** section.

# 3) Plan authoring
- Choose template from `templates/{plan-type}.md`.
- Fill sections: Summary, Goals/Non-Goals, Assumptions, Dependencies, Risks, UX spec (IA, density, container-query needs), A11y (WCAG 2.2 deltas), Phases & Tasks, Test Plan (Playwright scenarios + screenshots matrix), Rollback, Definition of Done.
- Save to: `${PLAN_DIR}/{slug}/plan-${slug}.md` (plan dir is git-ignored).

# 4) Approval gate (HARD STOP)
- Post a concise summary and **ask for approval**.
- Mark plan status in the doc header: `status: Pending Approval`.
- **Do not modify code** until explicit user approval.

# 5) Execution (after approval)
- Update status → `Approved`.
- For each phase:
  1) Implement changes following tokens/guidelines.
  2) Run UX/A11y checks via `.cursor/rules/design-review-auto.mdc`.
  3) Run Playwright suite; store HTML report + screenshots under `${PLAYWRIGHT_HTML_OUTPUT_DIR}`.
  4) Paste key screenshots into `${TASK_OUT_DIR}/{slug}/test-report.md`.
  5) Append a **Learning Log** entry (see coding-guidelines.md §16).
  6) If tests/rules changed, append one line to “Testing Playbook Updates” in `design-review-agent-updated.md`.

# 6) Artifacts
- `${TASK_OUT_DIR}/{slug}/changelog.md` (user-facing summary)
- `${TASK_OUT_DIR}/{slug}/test-report.md` (links to Playwright HTML + images from `${PLAYWRIGHT_HTML_OUTPUT_DIR}`)
- Plan remains in `${PLAN_DIR}/{slug}/plan-${slug}.md`

# 7) Definition of Done (task)
- All phases complete; CI checks pass (light/dark/high-contrast; compact/comfortable).
- test-report.md includes screenshots across sizes (1280, 1920, 2560) and themes.
- changelog.md updated (Keep-a-Changelog style).
- Learning Log updated; any rule/test updates captured.

---

## Key Files & Tools (Agent Index)
- **Plan templates**: `templates/plan-*.md`
- **Plans**: `planned-tasks/plan-{slug}.md` (git-ignored)
- **Tokens/Principles/Guides**: `designs/…`
- **Reviews**: `.cursor/rules/design-review-auto.mdc`, `.cursor/rules/design-workflow.mdc`
- **Reports**: `${TASK_OUT_DIR}/{slug}/test-report.md`, `${TASK_OUT_DIR}/{slug}/changelog.md` (git-ignored)
- **Playwright output**: `${PLAYWRIGHT_HTML_OUTPUT_DIR}` (git-ignored)

### Agent Notes
- Use MCP **tools** for discovery (web/docs/repos) before drafting. MCP standardizes tool invocation for LLMs.
- Configure Playwright HTML reporter to write under `${PLAYWRIGHT_HTML_OUTPUT_DIR}` so screenshots/reports are isolated for user review.

