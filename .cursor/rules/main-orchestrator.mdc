---
name: main-orchestrator
version: 1.0
description: "Master orchestrator for the end-to-end AI development workflow: Plan → Approve → Implement → Test → Learn."
author: AI Agent
---

# AI Agent Master Orchestrator

## 0) Mandate

This is the primary rule file that governs the entire lifecycle of a development task undertaken by an AI agent. It ensures a structured, predictable, and high-quality process from initial request to final knowledge capture. **All steps are mandatory.**

The core workflow is: **Plan → Approve → Implement → Test → Capture Learnings**.

---

## 1) Step: Plan

**Objective**: To understand the task and create a comprehensive, user-vetted plan *before* writing any code.

### 1.1) Discovery

- **Internal Context**: Read and internalize the following project knowledge bases:
    - `designs/ux-principles.md`: The "why" behind our design decisions.
    - `designs/tokens.json`: The single source of truth for all visual styles.
    - `designs/coding-guidelines.md`: The "how" of our code implementation.
- **External Context**: Use tools (`mcp_context7`, `mcp_shadcn`, `web_search`) to gather information about any external libraries, APIs, or concepts.

### 1.2) Plan Generation

1.  **Select Template**: Choose the appropriate template from `/templates` (`plan-new-feature.md`, `plan-enhancement.md`, etc.).
2.  **Create Plan File**: Create `plan-{task-name}.md` in the `/planned-tasks` directory.
3.  **Fill Plan**: Populate the plan with details gathered during discovery. The plan must be broken down into logical, sequential **Phases**. Each phase must be a self-contained unit of work that can be implemented and tested.

---

## 2) Step: Approve (Mandatory Gate)

**Objective**: To ensure user alignment and consent before proceeding with implementation.

- **Action**: Present the generated `plan-{task-name}.md` to the user.
- **Gate**: **STOP and wait for the user's explicit approval.** Do not proceed to the next step without it.

---

## 3) Step: Implement

**Objective**: To execute the approved plan, writing code that adheres to all project standards.

- **Trigger**: Once user approval is granted.
- **Action**: Hand off execution to the specialized `.cursor/rules/design-workflow.mdc` rule.
- **Process**: This sub-rule will guide the agent through the implementation of each phase defined in the plan, ensuring strict adherence to `designs/coding-guidelines.md` and `designs/tokens.json`.

---

## 4) Step: Test

**Objective**: To rigorously validate the implemented code against all design, UX, and accessibility requirements.

- **Trigger**: At the completion of each implementation phase.
- **Action**: Hand off execution to the specialized `.cursor/rules/design-reviewer.mdc` rule.
- **Process**: This sub-rule will guide the agent to:
    1.  Run the full suite of automated Playwright tests.
    2.  Capture screenshots across all required viewports, themes, and densities.
    3.  Perform a visual UX review of the screenshots, acting as a design critic.

---

## 5) Step: Capture Learnings

**Objective**: To ensure the project's knowledge base evolves and improves from every task.

- **Trigger**: After all phases are implemented and successfully tested.
- **Process**:
    1.  **Generate Reports**: Create a `changelog.md` and `test-report.md` (with screenshots) in the `/ai-tasks/{task-name}/` directory.
    2.  **Reflect**: Analyze the entire process for any novel problems, solutions, or unexpected behaviors.
    3.  **Update Knowledge Base**: If a new, valuable learning was discovered (e.g., a fix for a tricky CSS bug, a better way to test a component), the agent **must** propose an update to the relevant guideline file (`coding-guidelines.md`, `ux-principles.md`, etc.). This is the most critical step for long-term improvement.